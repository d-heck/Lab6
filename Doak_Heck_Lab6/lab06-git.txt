Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```
	Kevin Doak - kdoak@udel.edu
	David Heck - dheck@udel.edu

    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
	git help, shows the various usage of git commands and displays a short explaination for various common commands.

    ```

2.  What does `-ag` cause `git help` to do?

    ```
	The -ag causes git help to display all available commands in the git library as well as elsewhere on $Path.
	It also displays common git guides.
    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```
	Git status shows the state of the local working directory.
	It shows all work done / any waiting files to be pushed.
	It also shows any untracked files.

    ```

2.  What does `git add names.txt` do?

    ```
	It adds the file names.txt to the stage.
    ```

3.  What does `git commit -m "Add our names."` do?

    ```
	It preps files to be pushed to the repo with a custom comment / statement.
    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```
	It adds every untracked file in the local repo.
    ```

5.  What does `git commit` (without -m) do?

    ```
	It displays the defaut commit message window. 
	Showing the user what files will be commited, as well as allowing the user to write a message.
    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```
	git commit
    ```

7.  What does `git log do`?

    ```
	Git log shows history of commits

    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```
	modified: name.txt
    ```

    **Unstaged**

    ```
	modified: movies.txt
    ```

    **Untracked**

    ```
	foods.txt
    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```
	Only the changes to names.txt
	Since we have not "git add" movies.txt or food.txt

    ```

2.  What command do you run to stage changes?

    ```
	git add

    ```

3.  What command do you run to unstage changes?

    ```
	"git reset HEAD <file>..."
    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```
	It shows the difference in modified unstaged files.
    ```

2.  What does `git diff --cached` display?

    ```
	It shows the difference in modified staged files.
    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```
	git reset HEAD names.txt
	git add movies.txt
    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```
	What is observed:
		There is a staged modified movies.txt as well as an unstaged modified movies.txt
	
	What is going on:
		It saves a copy of the previous "git add" in the stage. If we were to commit this we would
		commit the previous changes that were added.
    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```
	What is observed:
		Under the unstaged section there is a "deleted: names.txt" line.
	What is going on:
		It shows that the names.txt file has been deleted. If we were to stage and commit this it would
		delete the names.txt file from the repositiory.
    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
	What is observed:
		It shows that movies.txt has been deleted (and is unstaged) and that last-movies.txt is untracked.
		
	What is going on:
		It shows that movies.txt has been deleted and recognized last-movies.txt as a new file.

    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```
	git rm movies.txt
	git rm names.txt
	git add foods.txt
	git add last-movies.txt
	git commit -m "#7 Changes"
    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```
	Index, Chache, and Stage refer to the state before the commit command.
	It serves as a way to "stage" or ready your files before commiting.

    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```
	We have a stage so we can modify specific files and view changes before commiting the changes.
	This allows us to review changes before "commiting" to them.

    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```
	It undos the last commit.
	All previously staged files remain staged.

    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```
	It undos the last commit, however the previously staged files are no longer staged.
	It is as if we just finished the previous commit.
    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
	Soft refers to before the commit
	Hard refers to the state after the previous commit.
    ```

3.  What do you think `HEAD` means?

    ```
	HEAD is the reference to the currently checked out commit.
    ```

4.  What do you think `HEAD^` means?

    ```
	HEAD^ refers to the most current commit.
	HEAD^2 refers to the commit before the most current commit.
    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
